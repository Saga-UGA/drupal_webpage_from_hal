<?php

/**
 * Implements hook_init
 */
function webpage_from_hal_init() {
}

/**
 * Implements hook_filter_info
 */
function webpage_from_hal_filter_info() {
    return array(
        'webpage_from_hal' => array(
            'title' => t('Include html content from hal url'),
            'description' => t('Active this filter to allow a user adding a special balise to build a list of publications from HAL'),
            'settings callback' => '_filter_hal_settings',
            'process callback' => '_filter_hal',
        ),
    );
}

/**
 * Implements preprocess_node
 */
function webpage_from_hal_preprocess_node($variables) {
    $nodeId = $variables['nid'];
    drupal_add_css(variable_get(sprintf("node-%s.webpage_from_hal.css", $nodeId)), array('type' => 'external'));
}

function _filter_hal($text, $filter) {
    $nodeId = arg(1);
    $text = html_entity_decode($text);

    if (!preg_match('/\{\{\s*type\="webpage_from_hal"([^\}]+)\}\}/', $text, $matches)) {
        watchdog('webpage_from_hal', "No tag match", WATCHDOG_DEBUG);
        return $text;
    }

    if (!preg_match("#url=\"([^\"]+)\"#", strip_tags($matches[1]), $uris)) {
        watchdog('webpage_from_hal', "Tag found but syntax error with url", WATCHDOG_ERROR);
        return $text;
    }

    $infos = parse_url($uris[1]);
    $ip = gethostbyname($infos['host']);

    if ($ip != '193.48.96.10') {
        watchdog('webpage_from_hal', "Url invalid", WATCHDOG_ERROR);
        
        return $text;
    }

    if (!preg_match("/css\=\.\.\/([^&]+)&?/", $uris[1], $css)) {
        watchdog('webpage_from_hal', "Fail getting css style from url", WATCHDOG_ERROR);
    } else {
        $cssUri = sprintf("http://hal.univ-grenoble-alpes.fr/%s", $css[1]);
        variable_set(sprintf("node-%s.webpage_from_hal.css", $nodeId), $cssUri);
    }

    watchdog('webpage_from_hal', sprintf("drupal_http_request(%s)", $uris[1]), WATCHDOG_DEBUG);
    $content = drupal_http_request($uris[1]);
    watchdog('webpage_from_hal', "drupal_http_request: Done", WATCHDOG_DEBUG);    

    $dom = new DomDocument();
    $dom->loadHTML($content->data);
    
    $tags = $dom->getElementsByTagname("body");
    
    if ($tags->length != 1) {
        return $text;
    }

    foreach ($tags as $tag) {
        $halPublis = DOMinnerHTML($tag);
    }

    $text = str_replace($matches[0], $halPublis, $text);

    return $text;
}

function DOMinnerHTML(DOMNode $element) {
    $innerHTML = ""; 
    $children  = $element->childNodes;
    
    foreach ($children as $child) {
        $innerHTML .= $element->ownerDocument->saveHTML($child);
    }
    
    return $innerHTML; 
}